accountForObservationTimes=FALSE,
eventTime =  24)
getSampleSizeSurvival(hazardRatio = log(.6)/log(.8),
beta = .1,
typeOfComputation = "Freedman",
sided = 2,
alpha = 0.05,
accountForObservationTimes=FALSE,
lambda1 = .6)
getSampleSizeSurvival(hazardRatio = log(.6)/log(.8),
beta = .1,
typeOfComputation = "Freedman",
sided = 2,
alpha = 0.05,
accountForObservationTimes=FALSE,
accrualIntensity = .1)
getSampleSizeSurvival(hazardRatio = log(.6)/log(.8),
beta = .1,
typeOfComputation = "Freedman",
sided = 2,
alpha = 0.05,
accountForObservationTimes=FALSE,
accrualIntensity = .3)
getSampleSizeSurvival(pi1 = .8,
pi2 = .6,
beta = .1,
typeOfComputation = "Schoenfeld",
sided = 2,
alpha = 0.05,
accountForObservationTimes=FALSE,
followUpTime = 24)
getSampleSizeSurvival(hazardRatio = log(.6)/log(.8),
beta = .1,
typeOfComputation = "Schoenfeld",
sided = 2,
alpha = 0.05,
accountForObservationTimes=FALSE
)
getSampleSizeSurvival(hazardRatio = log(.6)/log(.8),
beta = .1,
typeOfComputation = "Schoenfeld",
sided = 2,
alpha = 0.05,
accountForObservationTimes=FALSE,
pi2 = .6
)
getSampleSizeSurvival(hazardRatio = log(.6)/log(.8),
beta = .1,
typeOfComputation = "Schoenfeld",
sided = 2,
alpha = 0.05,
accountForObservationTimes=FALSE,
pi2 = .8
)
?stats::splinefun
roxygen2
?roxygen2
install.packages("roxygen2)
install.packages("roxygen2")
install.packages("bookdown")
install.packages("bookdown")
install.packages("bookdown")
install.packages("bookdown")
install.packages("pwr")
install.packages(".", dependencies = TRUE)
install.packages("adoptr", dependencies = TRUE)
library(adoptr)
library(adoptr)
library(adoptr)
PointMassPrior()
PointMassPrior(.5)
PointMassPrior(.5, mass = 1)
PointMassPrior(.5, 1)
class(PointMassPrior(.5, 1))
is(PointMassPrior(.5, 1))
?Power
showClass("Score")
?IntegralScore
?integral
?ExpectedSampleSize
expand.grid(c(1,2), c(3,4))
matrix(c(1,2), nrow=2)
matrix(c(1,2), nrow=2) %*% c(3,4)
datadist <- Normal(two_armed = FALSE)
initial_design <- get_initial_design(.4
)
initial_design <- get_initial_design(.4, .025, .1)
initial_design <- get_initial_design(.4, .025, .1, type="two-stage)
initial_design <- get_initial_design(.4, .025, .1, type="two-stage)
initial_design <- get_initial_design(.4, .025, .1, type="two-stage")
initial_design <- get_initial_design(.4, .025, .1, type_design = ="two-stage")
initial_design <- get_initial_design(.4, .025, .1, type_design = "two-stage")
datadist <- Normal(two_armed = FALSE)
?`Prior-class`
H_1 <- ContinuousPrior(function(x) 2*x, c(0, 1))
evaluate(Power(datadist, H_1), initial_design)
devtools::load_all(".")
evaluate(Power(datadist, H_1), initial_design)
grid
prior@support
seq(prior@support[1], prior@support[2], length.out = k)
probability_density_function(dist, grid$x1, n1, grid$piv
)
probability_density_function(dist, grid$x1, n1, grid$piv)
matrix(probability_density_function(dist, grid$x1, n1, grid$piv), nrow = length(x1))
mass
(matrix(probability_density_function(dist, grid$x1, n1, grid$piv), nrow = length(x1)) %*% mass)
mass
View(matrix(probability_density_function(dist, grid$x1, n1, grid$piv), nrow = length(x1)))
ExpectedSampleSize(Normal(), PointMassPrior(c(0, .4), mass = c(.5, .5)))
?lm
multi.fit = lm(Sales~Spend+Month, data=dataset)
data("ToothGrowth")
head(ToothGrowth)
ToothGrowth$supp
View(data("ToothGrowth")
head(ToothGrowth))
options("max.print"=999)
View(data("ToothGrowth")
head(ToothGrowth))
ToothGrowth
lm(len ~ supp + dose, data = ToothGrowth)
m1 <- lm(len ~ supp + dose, data = ToothGrowth)
m2 <- lm(len ~ dose, data = ToothGrowth)
summary(m2)
anova(m2, m1)
summary(m1)
s1 <- summary(m1)
s1$coefficients
s1$coefficients[,4]
s1$coefficients[2,4]
anova(m1)
m3 <- lm(len ~ dose + supp, data = ToothGrowth)
anova(m3)
getMethods("Normal")
findMethods("Normal")
findMethods("Normal", where = "adoptr")
library(adoptr)
findMethods("Normal", where = "adoptr")
findMethods("Normal")
findMethods(Normal)
findMethods(Normal, package="adoptr")
Normal()
showMethods("Normal")
showMethods("probability_density_function")
showMethods(classes="Normal")
Uniform()
Uni()
showMethods(classes="Student")
showMethods(classes="Uniform")
showMethods(classes="Mist")
a <- Normal()
b <- Chi()
library(distr)
a <- Norm()
b <- Unif()
a/b
d <- a/b
n(d, 100)
?r
r(d)(100)
d(d)(100)
probability_density_function(Normal())
probability_density_function(Normal(), 0, 1, 0)
a <- Norm()
b <- Norm()
d <- a/b
b <- Normal()
a <- Normal()
d <- a/b
is(Normal())
showMethods(class="ContinuousPrior")
H0 <- PointM
showMethods("ContinuousPrior")
descr(data.frame(g=c("a", "b", "a", "b"), v=c("c", "c", "d", "d"), "g")
descr(data.frame(g=c("a", "b", "a", "b"), v=c("c", "c", "d", "d")), "g")
DescrTab2::descr(data.frame(g=c("a", "b", "a", "b"), v=c("c", "c", "d", "d")), "g")
devtools::install(build_vignettes = TRUE)
devtools::install(build_vignettes = TRUE)
browseVignettes()
?remotes::install_github
devtools::install(build_vignettes = TRUE)
install.packages("renv")
library(adoptr)
devtools::load_all(".")
UnconditionalScore()
new("UnconditionalScore")
new("UnconditionalScore", "abc")
new("UnconditionalScore", label = "abc")
a <- new("UnconditionalScore", label = "abc")
is(a)
b <- new("IntegralScore", label = "def")
is(b)
library(stringr)
str_detect(c("a"), c("a", "b"))
str_detect(c("a", "b"), c("a", "b"))
?usethis::use_github_action
devtools::install_github("r-lib/usethis")
library(usethis)
devtools::load_all(".")
class(Binomial())
class(Binomial(.3))
is(Binomial(.3)
)
library(adoptr)
pkgdown::build_site()
pkgdown::preview_page('reference/NormalDataDistribution-class.html')
pkgdown::preview_page('articles/adoptr.html')
library(adoptr)
exp_no_events <- ExpectedNumberOfEvents(datadist,H_1)
knitr::opts_chunk$set(
collapse   = TRUE,
comment    = "#>",
fig.width  = 7,
fig.height = 5
)
library(adoptr)
datadist <- Binomial(0.3, two_armed = TRUE)
H_0        <- PointMassPrior(.0, 1)
prior      <- ContinuousPrior(function(x) 1/(pnorm(0.69,0.2,0.2)-pnorm(-0.29,0.2,0.2))*dnorm(x,0.2,0.2),
support = c(-0.29,0.69),
tighten_support = TRUE)
alpha      <- 0.025
min_epower <- 0.8
toer_cnstr <- Power(datadist, H_0) <= alpha
epow_cnstr <- Power(datadist, condition(prior, c(0.0,0.69))) >= min_epower
ess <- ExpectedSampleSize(datadist,prior)
init <- get_initial_design(0.2,0.025,0.2)
opt_design <- minimize(ess,subject_to(toer_cnstr,epow_cnstr),initial_design = init, check_constraints = TRUE)
plot(opt_design$design)
datadist <- Survival(0.7, two_armed = TRUE)
H_0 <- PointMassPrior(1,1)
H_1 <- PointMassPrior(1.7,1)
alpha <- 0.025
min_power <- 0.8
toer_con <- Power(datadist,H_0)<=alpha
pow_con <- Power(datadist,H_1)>=min_power
exp_no_events <- ExpectedNumberOfEvents(datadist,H_1)
init <- get_initial_design(1.7,0.025,0.2,dist=datadist)
opt_survival <- minimize(exp_no_events,subject_to(toer_con,pow_con),initial_design = init,check_constraints=TRUE)
summary(opt_survival$design)
?survfit
summary( survfit( Surv(futime, fustat)~1, data=ovarian))
library(survival)
summary( survfit( Surv(futime, fustat)~1, data=ovarian))
?Surv
source("~/Desktop/survival/sim.R", echo=TRUE)
group <- sample(factor(c("Trt", "Ctl")), 100, replace = TRUE)
source("~/Desktop/survival/sim.R", echo=TRUE)
group
source("~/Desktop/survival/sim.R", echo=TRUE)
scales::percent()(17.5)
scales::percent(7/40)
7/40
scales::percent(7L/40L)
scales::percent(23L/40L)
23L/40L
?scales::percent
scales::label_percent(.5)
scales::label_percent()(23L/40L)
scales::label_percent()(7L/40L)
?scales::label_percent
scales::label_percent()(23L/40L)
scales::label_percent(accuracy = 1)(23L/40L)
scales::label_percent(accuracy = .9)(23L/40L)
scales::label_percent(accuracy = 1.1)(23L/40L)
scales::label_percent(accuracy = 1.3)(23L/40L)
scales::label_percent(accuracy = .999)(23L/40L)
scales::label_percent(accuracy = 1)(23L/40L)
23L/40L
final_analysis_idx <- (recruit_calender > interim_time) | ((recruit_calender + event_time > interim_time) & (recruit_calender + censor_time > interim_time))
set.seed(123)
recruit_calender <- rexp(100)
event_time <- rexp(100)
censor_time <- rexp(100)
interim_time <- .2
final_time <- 3
group <- sample(factor(c("Trt", "Ctl")), 100, replace = TRUE)
final_analysis_idx <- (recruit_calender > interim_time) | ((recruit_calender + event_time > interim_time) & (recruit_calender + censor_time > interim_time))
final_analysis_idx
final_time - recruit_calender[final_analysis_idx]
final_analysis_idx <- ((recruit_calender > interim_time) | ((recruit_calender + event_time > interim_time) & (recruit_calender + censor_time > interim_time))) & (recruit_calender < final_time)
dat <- data.frame(
group = group[final_analysis_idx],
time1 = pmax(interim_time - recruit_calender, 0),
time2 = pmin(event_time[final_analysis_idx], censor_time[final_analysis_idx], final_time - recruit_calender[final_analysis_idx]),
event = (recruit_calender + event_time < final_time) & (event_time < censor_time)
)
source("~/Desktop/survival/sim.R", echo=TRUE)
source("~/Desktop/survival/sim.R", echo=TRUE)
source("~/Desktop/survival/sim.R", echo=TRUE)
dat
source("~/Desktop/survival/sim.R", echo=TRUE)
dat
survfit(Surv(time1, time2, event) ~ group, data = dat)
summary(fit)
fit <- survfit(Surv(time1, time2, event) ~ group, data = dat)
summary(fit)
fit
fit <- survdiff(Surv(time1, time2, event) ~ group, data = dat)
summary(fit)
fit <- survdiff(Surv(time1, time2, event) ~ group, data = dat)
?survdiff
dat$event
fit <- survdiff(Surv(time1, time2, event) ~ 1, data = dat)
summary(fit)
with(dat, Surv(time1, time2, event))
with(dat, Surv(time1, time2, event, type = "interval"))
with(dat, Surv(time1, time2, event, type = "interval2"))
?Surv
survreg(Surv(time1, time2, event) ~ 1, data = dat)
survcheck(Surv(time1, time2, event) ~ 1, data = dat)
survexp(Surv(time1, time2, event) ~ 1, data = dat)
survreg(Surv(time1, time2, event) ~ 1, data = dat)
survfit(Surv(time1, time2, event) ~ 1, data = dat)
survfit(Surv(time1, time2, event) ~ group, data = dat)
anova(survfit(Surv(time1, time2, event) ~ group, data = dat))
survdiff(survfit(Surv(time1, time2, event) ~ group, data = dat))
summary(survfit(Surv(time1, time2, event) ~ group, data = dat))
library(interval)
install.packages("interval")
library(interval)
install.packages("Icens")
set.seed(123)
recruit_calender <- rexp(100)
event_time <- rexp(100)
censor_time <- rexp(100)
interim_time <- .2
final_time <- 3
group <- sample(factor(c("Trt", "Ctl")), 100, replace = TRUE)
final_analysis_idx <- ((recruit_calender > interim_time) | ((recruit_calender + event_time > interim_time) & (recruit_calender + censor_time > interim_time))) & (recruit_calender < final_time)
dat <- data.frame(
group = group[final_analysis_idx],
time1 = pmax(interim_time - recruit_calender[final_analysis_idx], 0),
time2 = pmin(event_time[final_analysis_idx], censor_time[final_analysis_idx], final_time - recruit_calender[final_analysis_idx]),
event = (recruit_calender[final_analysis_idx] + event_time[final_analysis_idx] < final_time) & (event_time[final_analysis_idx] < censor_time[final_analysis_idx])
)
fit <- survdiff(Surv(time1, time2, event) ~ 1, data = dat)
fit <- coxph(Surv(time1, time2, event) ~ 1, data = dat)
fit
fit <- coxph(Surv(time1, time2, event) ~ group, data = dat)
fit
summary(fit )
summary(fit)
summary(fit)
?coxph
with(dat, Surv(time1, time2, event))
with(dat, survfit(Surv(time1, time2, event)~group) )
with(dat, summary(survfit(Surv(time1, time2, event)~group)))
fit <- coxph(Surv(time1, time2, event) ~ group, data = dat)
fit$score
fit
summary(fit)
fit <- coxph(Surv(time1, time2, event) ~ group, data = dat)
sumfit <- summary(fit)
sumfit$logtest
sumfit$waldtest
sumfit$sctest
sumfit
sumfit$call
sumfit$rsq
sumfit$concordance
sumfit$used.robust
anova(fit)
sumfit$sctest
?anova.coxph
sumfit$waldtest
sumfit$rsq
sumfit$concordance
sumfit$coefficients
sumfit$loglik
sumfit$sctest
dat2 <- data.frame(
group = group,
time1 = pmin(event_time, censor_time),
event = event_time<censor_time
)
View(dat2)
coxph(Surv(time1, event) ~ group, data = dat)
survdiff(Surv(time1, event) ~ group, data = dat)
summary(survdiff(Surv(time1, event) ~ group, data = dat))
summary(fit2)
fit2 <- coxph(Surv(time1, event) ~ group, data = dat)
summary(fit2)
survdiff(Surv(time1, event) ~ group, data = dat)
fit3 <- survdiff(Surv(time1, event) ~ group, data = dat)
fit3
fit3$pvalue
fit2 <- coxph(Surv(time1, event) ~ group, data = dat)
sumfit2 <- summary(fit2)
sumfit2
fit3 <- survdiff(Surv(time1, event) ~ group, data = dat)
fit3
sumfit2$sctest
fit2
fit3
fit2 <- coxph(Surv(time1, event) ~ group, data = dat)
sumfit2 <- summary(fit2)
sumfit2
fit3 <- survdiff(Surv(time1, event) ~ group, data = dat)
fit3
fit3$chisq
sumfit2$sctest
fit3$chisq^2
dat2 <- data.frame(
group = group,
time1 = pmin(event_time),
event = 1
)
fit2 <- coxph(Surv(time1, event) ~ group, data = dat)
sumfit2 <- summary(fit2)
sumfit2
fit3 <- survdiff(Surv(time1, event) ~ group, data = dat)
fit3
dat2 <- data.frame(
group = group,
time1 = pmin(event_time, censor_time),
event = event_time<censor_time
)
fit2 <- coxph(Surv(time1, event) ~ group, data = dat2)
sumfit2 <- summary(fit2)
sumfit2
fit3 <- survdiff(Surv(time1, event) ~ group, data = dat2)
fit3
fit3$chisq
fit2$score
dat2 <- data.frame(
group = group,
time1 = pmin(event_time, censor_time),
event = event_time<censor_time
)
fit2 <- coxph(Surv(time1, event) ~ group, data = dat2)
sumfit2 <- summary(fit2)
sumfit2
fit3 <- survdiff(Surv(time1, event) ~ group, data = dat2)
fit3
sumfit2$sctest
fit3$chisq
dat2$event
sumfit2
sumfit2$waldtest
sumfit2$coefficients
sumfit2$coefficients[,"z"]
sumfit2$coefficients[,"z"]^2
fit3$chisq
sumfit2$waldtest
dat2 <- data.frame(
group = group,
time1 = pmin(event_time),
event = 1
)
sumfit2$coefficients[,"z"]^2
fit3$chisq
fit2 <- coxph(Surv(time1, event) ~ group, data = dat2)
sumfit2 <- summary(fit2)
sumfit2
fit3 <- survdiff(Surv(time1, event) ~ group, data = dat2)
fit3
sumfit2$coefficients[,"z"]^2
fit3$chisq
wilcox.test(group ~ event_time, data = dat2)
wilcox.test(event_time ~ group, data = dat2)
wilcox.test(event_time ~ group, data = dat2, correct=FALSE)
wilcox.test(event_time ~ factor(group), data = dat2, correct=FALSE)
set.seed(123)
recruit_calender <- rexp(100)
event_time <- rexp(100)
censor_time <- rexp(100)
interim_time <- .2
final_time <- 3
group <- sample(factor(c("Trt", "Ctl")), 100, replace = TRUE)
final_analysis_idx <- ((recruit_calender > interim_time) | ((recruit_calender + event_time > interim_time) & (recruit_calender + censor_time > interim_time))) & (recruit_calender < final_time)
dat <- data.frame(
group = group[final_analysis_idx],
time1 = pmax(interim_time - recruit_calender[final_analysis_idx], 0),
time2 = pmin(event_time[final_analysis_idx], censor_time[final_analysis_idx], final_time - recruit_calender[final_analysis_idx]),
event = (recruit_calender[final_analysis_idx] + event_time[final_analysis_idx] < final_time) & (event_time[final_analysis_idx] < censor_time[final_analysis_idx])
)
dat2 <- data.frame(
group = group,
time1 = pmin(event_time, censor_time),
event = event_time<censor_time
)
with(dat, summary(survfit(Surv(time1, time2, event)~group)))
fit <- coxph(Surv(time1, time2, event) ~ group, data = dat)
sumfit <- summary(fit)
fit2 <- coxph(Surv(time1, event) ~ group, data = dat2)
sumfit2 <- summary(fit2)
sumfit2
sumfit2$waldtest
sumfit2$coefficients
sumfit2$coefficients[,"z"]
sumfit2$coefficients[,"z"]^2
sumfit2$coefficients[,"Pr(>|z|)"]
sumfit2$waldtest["pvalue"]
sumfit2$waldtest["pvalue"]-sumfit2$coefficients[,"Pr(>|z|)"]
pnorm(0.525583 )
pnorm(sumfit2$coefficients[, "z"] )
pnorm(sumfit2$coefficients[, "z"])
pnorm(sumfit2$coefficients[, "z"], lower.tail = FALSE)
pnorm(sumfit2$coefficients[, "z"], lower.tail = FALSE)*2
pchisq(sumfit2$coefficients[, "z"]**2, 1)
1-pchisq(sumfit2$coefficients[, "z"]**2, 1)
sumfit2$coefficients[, "z"]**2
View(summary.coxph)
summary.coxph
coxph
fit2$score
fit2$wald.test
View(summary)
getAnywhere("summary.coxph")
View(getAnywhere("summary.coxph"))
